package com.example.retrofitdemo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.retrofitdemo.Db_user;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DB_USER.
 */
public class Db_userDao extends AbstractDao<Db_user, Long> {

	public static final String TABLENAME = "DB_USER";

	/**
	 * Properties of entity Db_user.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
		public final static Property LoginName = new Property(2, String.class, "loginName", false, "LOGIN_NAME");
		public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
		public final static Property Qq = new Property(4, String.class, "qq", false, "QQ");
		public final static Property Wechat = new Property(5, String.class, "wechat", false, "WECHAT");
		public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
		public final static Property Deviceno = new Property(7, String.class, "deviceno", false, "DEVICENO");
	};

	public Db_userDao(DaoConfig config) {
		super(config);
	}

	public Db_userDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'DB_USER' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'USER_NAME' TEXT," + // 1: user_name
				"'LOGIN_NAME' TEXT," + // 2: loginName
				"'PWD' TEXT," + // 3: pwd
				"'QQ' TEXT," + // 4: qq
				"'WECHAT' TEXT," + // 5: wechat
				"'PHONE' TEXT," + // 6: phone
				"'DEVICENO' TEXT);"); // 7: deviceno
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB_USER'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Db_user entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String user_name = entity.getUser_name();
		if (user_name != null) {
			stmt.bindString(2, user_name);
		}

		String loginName = entity.getLoginName();
		if (loginName != null) {
			stmt.bindString(3, loginName);
		}

		String pwd = entity.getPwd();
		if (pwd != null) {
			stmt.bindString(4, pwd);
		}

		String qq = entity.getQq();
		if (qq != null) {
			stmt.bindString(5, qq);
		}

		String wechat = entity.getWechat();
		if (wechat != null) {
			stmt.bindString(6, wechat);
		}

		String phone = entity.getPhone();
		if (phone != null) {
			stmt.bindString(7, phone);
		}

		String deviceno = entity.getDeviceno();
		if (deviceno != null) {
			stmt.bindString(8, deviceno);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Db_user readEntity(Cursor cursor, int offset) {
		Db_user entity = new Db_user( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginName
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwd
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // qq
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wechat
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // deviceno
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Db_user entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
		entity.setLoginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
		entity.setPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setQq(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setWechat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
		entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
		entity.setDeviceno(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Db_user entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Db_user entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
